Code management:
- private repository (github?). remove all fork-repositories from public access
- make tags for working android, working freertos
- make tags for working patching

Finish terminal application

FIND A NAME AND LICENSE

Decoder/Encoder (>=2 weeks of work)
- adapt autodecoder

Merge Cosmin's code (>= 2 weeks of work)
- update to use new memory management
- fix: kernel with SD driver, no guest SD access selected, report to guest 'no sd card present'
- fix: hypervisor SD card access selected, debug to SD card
- tests/unit test

Small annoyances
- get rid of freertos ifdefs ! (<= 1 day)
- get the guest working with vmem off & on/off switching (1 week)
  with guest vmem off, a (priv) translation fault in the hypervisor is delivered to the guest! wtf?
- add script ot dump text/data/bss/malloc region sizes after comp (< 1 day)
  how much space left for malloc?

Translation run-time
1. implement infrastructure: structs, function stubs.. (<= 1 week)
   BLOG/BLOB
   code cache -> code store
   metadata cache -> basicblocklog
2. pc mapping & instruction translations
   - remove is sensitive check by adding extra field(s) in decoder
   - when raising exception in guest, make sure LR is correct, and when returning, make sure we recover from incorrect reg values,...
3. DEADBEEF spill (depends on BLOB implementation)
4. small stuff:
- define BLOCK_COPY_DEBUG -> CONFIG_DEBUG_TRANSLATION
- figure out why BKPT in user mode causes PABT and whether we can work around that (CP14 reg?)
- verify original unit tests by Peter still work

Unit test framework


Overhead measurements: 
1. Identifying inefficiences in the rest of the codebase
- table search decoder
- drop legacy allocator
- decoder used in load/store emulation
- linked list for pagetableinfo -> too slow , interval trees? (future)
- TLB and cache management
2. measuring
- analyse/improve/verify cosmins profiler.
- measure a single context switch overhead
- measure average hypercall overhead/maximum hypercall overhead#
- measure interrupt overheads
- measure other exception frequency/overhead
- (for paper) count unnecessary page table entries shadow mapped before, measure shadow mapping work overhead; count the amount of entries shadow mapped only on-demand.


Memory management
- Run bash, see what happens

TODO measurements
- count the number of instructions that must spill by extra entries in the table search decoder for in place rewriting
- can we measure the average block size during boot 
- find the N longest blocks
- count how many times we need mapping PC for LR

blog: 
guest original start/size(16bit)
ptr to code store/size(16bit)
ptr to address translation structure
type:invalid/arm/thumb
EOB instruction+handler

blob (section):
code only

use 'hashing' for translation cache, but function is monotonic in guest addr
==> O(1) lookup
==> collisions..
scan: linear, but limited range

gcontext keeps next blog index and next code store pointer

