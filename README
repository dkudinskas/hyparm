LINUX KERNEL:

The config file is checked into the repository. The kernel version used is a 2.6.28.1 release version, download link
http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.28.1.tar.bz2

U-Boot uses a specific kernel image format called uImage. Such image can be built from a kernel source tree using the uImage target. It is prepared from the kernel ELF binary (vmlinuz) using a series of scripts, of which some are well hidden (dot-files):

1. The kernel ELF binary vmlinuz is compressed to arch/arm/boot/compressed/vmlinux

2. A zImage is created using the arch/arm/boot/.zImage.cmd script:
arm-none-eabi-objcopy -O binary -R .note -R .note.gnu.build-id -R .comment -S arch/arm/boot/compressed/vmlinux arch/arm/boot/zImage

3. A uImage is created from the zImage using the arch/arm/boot/.uImage.cmd script, which in turn calls scripts/mkuboot.sh. The latter resolves the location of the mkimage binary, and calls it to create the actual uImage:
mkimage -A arm -O linux -T kernel -C none -a 0x80008000 -e 0x80008000 -n 'Linux-2.6.28.1' -d arch/arm/boot/zImage arch/arm/boot/uImage

You can manually build a uImage from an uncompressed kernel:

1. Build an Image file:
arm-none-eabi-objcopy -O binary -R .note -R .note.gnu.build-id -R .comment -S vmlinux arch/arm/boot/Image
2. Invoke mkimage on the Image file instead:
mkimage -A arm -O linux -T kernel -C none -a 0x80008000 -e 0x80008000 -n 'Linux-2.6.28.1' -d arch/arm/boot/Image arch/arm/boot/uImage

FREERTOS:

Clone the following git repository

git clone git://git.silverarrow.org/shared/freertos-ported.git

1. Open the Makefile located at Demo/ARM_OMAP3/Makefile.

2. Set USE_THUMB_MODE = YES for Thumb-2 binary or NO for ARMv7 binary.

3. Set USE_HYPERVISOR = 1 for starting a single LED task or 0 for starting all the demo tasks ( except comtask ).

4. Set USE_PREEMPTION in Demo/ARM_OMAP3/FreeRTOSConfig.h to the desired value ( 0 or 1 ).

5. Compile the hypervisor ( see instructions below )

6. Run the program by invoking:

go 0x8c000000 -guest freertos -kernel 0x80300000

Note: Remember to change the default memory locations as appropriate.


COMPILING THE HYPERVISOR:

A cross-compiler toolchain is required for building the hypervisor. It must be set using the CROSS_COMPILE variable, either from the environment, or as part of the command line to make.

The hypervisor can be customized at compile time using 'make config'. The default configuration can be restored at any time using 'make defconfig'.

Typical example of the steps required to compile the hypervisor:

# export CROSS_COMPILE=/opt/arm-none-eabi-4.4/bin/arm-none-eabi-
# make config
# make

Compile-time configuration is managed through Kconfig. Configuration options are defined in 'scripts/kconfig.data'.


GIT:

  Global setup:
 Download and install Git
  git config --global user.name "Your Name"
  git config --global user.email "email"
  Add your public key

Next steps:
  mkdir hyparm
  cd hyparm
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:gendalfas/hyparm.git
  git push origin master

Existing Git Repo?
  cd existing_git_repo
  git remote add origin git@github.com:gendalfas/hyparm.git
  git push origin master

Importing a Subversion Repo?
  Click here

ssh-keygen -t rsa -C "email@provider.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/tekkub/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/tekkub/.ssh/id_rsa.
Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db email@provider.com


git clone git@github.com:gendalfas/hyparm.git
git pull git@github.com:gendalfas/hyparm.git master


